{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb94f930",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from IPython.display import display, HTML\n",
    "\n",
    "# Path to the updated CSV file\n",
    "filename = r\"C:\\Users\\Administrator\\Desktop\\student-dataset-extended.csv\"\n",
    "\n",
    "def load_and_prepare_data(filename):\n",
    "    df = pd.read_csv(filename)\n",
    "    df['average_grade'] = df[['english.grade', 'math.grade', 'sciences.grade', 'language.grade']].mean(axis=1)\n",
    "    features = df[['latitude', 'longitude', 'age', 'portfolio.rating', 'coverletter.rating', 'refletter.rating',\n",
    "                   'english.grade', 'math.grade', 'sciences.grade', 'language.grade', 'attendance', 'exam_degree',\n",
    "                   'homework_submission_rate', 'participation_in_class', 'quiz_scores', 'study_time',\n",
    "                   'motivation_level', 'stress_level', 'social_interaction', 'parental_involvement',\n",
    "                   'access_to_resources', 'school_environment', 'participation_in_sports', \n",
    "                   'art_music_participation', 'volunteer_work', 'sleep_quality', 'physical_health']]\n",
    "    target = df['average_grade']\n",
    "    features = features.fillna(features.mean())\n",
    "    scaler = StandardScaler()\n",
    "    features = scaler.fit_transform(features)\n",
    "    return features, target, scaler, df\n",
    "\n",
    "def train_model(features, target):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
    "    model = LinearRegression()\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    print(f\"Mean Squared Error: {mse:.2f}\")\n",
    "    print(f\"R^2 Score: {r2:.2f}\")\n",
    "    return model\n",
    "\n",
    "def provide_advice(predicted_grade, user_data):\n",
    "    advice = []\n",
    "    \n",
    "    if user_data['english.grade'] < 70:\n",
    "        advice.append('''Consider improving your English skills. Hereâ€™s a helpful video: <a href=\"https://www.youtube.com/watch?v=7km4EHgkQiw\" target=\"_blank\">English Grammar Basics</a>''')\n",
    "    \n",
    "    if user_data['math.grade'] < 70:\n",
    "        advice.append('''You may need to strengthen your Math skills. Check out this video: <a href=\"https://www.youtube.com/watch?v=l3XzepN03KQ\" target=\"_blank\">Basic Algebra for Beginners</a>''')\n",
    "    \n",
    "    if user_data['sciences.grade'] < 70:\n",
    "        advice.append('''Improve your Science understanding with this resource: <a href=\"https://www.youtube.com/watch?v=OdI1TzMcndE\" target=\"_blank\">Basic Science Concepts</a>''')\n",
    "    \n",
    "    if user_data['language.grade'] < 70:\n",
    "        advice.append('''Enhance your language skills with this video: <a href=\"https://www.youtube.com/watch?v=GZgBcjxqcMI\" target=\"_blank\">Language Learning Tips</a>''')\n",
    "    \n",
    "    if user_data['motivation_level'] < 50:\n",
    "        advice.append('''Boost your motivation by setting clear goals. Watch: <a href=\"https://www.youtube.com/watch?v=wnHW6o8WMas\" target=\"_blank\">How to Stay Motivated</a>''')\n",
    "    \n",
    "    if user_data['stress_level'] > 70:\n",
    "        advice.append('''High stress levels detected. Manage stress with these techniques: <a href=\"https://www.youtube.com/watch?v=hnpQrMqDoqE\" target=\"_blank\">Stress Management Tips</a>''')\n",
    "    \n",
    "    if user_data['parental_involvement'] < 50:\n",
    "        advice.append('''Increased parental involvement could help. Here's a video for parents: <a href=\"https://www.youtube.com/watch?v=jp-nX26rF8w\" target=\"_blank\">Parent Involvement in Education</a>''')\n",
    "    \n",
    "    if user_data['sleep_quality'] < 50:\n",
    "        advice.append('''Improve your sleep quality for better performance: <a href=\"https://www.youtube.com/watch?v=A5dE25ANU0k\" target=\"_blank\">Tips for Better Sleep</a>''')\n",
    "    \n",
    "    return advice\n",
    "\n",
    "def get_user_input_with_limits(prompt, min_value, max_value, dtype=float):\n",
    "    \"\"\"Prompt user for input with limits based on the data.\"\"\"\n",
    "    while True:\n",
    "        try:\n",
    "            value = dtype(input(f\"{prompt} (between {min_value} and {max_value}): \"))\n",
    "            if min_value <= value <= max_value:\n",
    "                return value\n",
    "            else:\n",
    "                print(f\"Please enter a value between {min_value} and {max_value}.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a valid number.\")\n",
    "\n",
    "def get_user_input_no_limit(prompt, dtype=float):\n",
    "    \"\"\"Prompt user for input with no limits.\"\"\"\n",
    "    while True:\n",
    "        try:\n",
    "            return dtype(input(f\"{prompt}: \"))\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a valid number.\")\n",
    "\n",
    "def get_user_input_binary(prompt):\n",
    "    \"\"\"Prompt user for binary input (0 or 1).\"\"\"\n",
    "    while True:\n",
    "        try:\n",
    "            value = int(input(f\"{prompt} (0 = No, 1 = Yes): \"))\n",
    "            if value in [0, 1]:\n",
    "                return value\n",
    "            else:\n",
    "                print(\"Please enter 0 or 1.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter 0 or 1.\")\n",
    "\n",
    "def main():\n",
    "    features, target, scaler, df = load_and_prepare_data(filename)\n",
    "    model = train_model(features, target)\n",
    "    \n",
    "    print(\"Please enter the following details:\")\n",
    "    user_data = {\n",
    "        'latitude': get_user_input_no_limit(\"Latitude\"),\n",
    "        'longitude': get_user_input_no_limit(\"Longitude\"),\n",
    "        'age': get_user_input_with_limits(\"Age\", 16, 26, int),\n",
    "        'portfolio.rating': get_user_input_with_limits(\"Portfolio Rating\", 0, 5),\n",
    "        'coverletter.rating': get_user_input_with_limits(\"Cover Letter Rating\", 0, 5),\n",
    "        'refletter.rating': get_user_input_with_limits(\"Reference Letter Rating\", 0, 5),\n",
    "        'english.grade': get_user_input_with_limits(\"English Grade\", 0, 5),\n",
    "        'math.grade': get_user_input_with_limits(\"Math Grade\", 0, 5),\n",
    "        'sciences.grade': get_user_input_with_limits(\"Sciences Grade\", 0, 5),\n",
    "        'language.grade': get_user_input_with_limits(\"Language Grade\", 0, 5),\n",
    "        'attendance': get_user_input_with_limits(\"Attendance (days)\", 0, 200, int),\n",
    "        'exam_degree': get_user_input_with_limits(\"Exam Degree (percentage)\", 0, 100),\n",
    "        'homework_submission_rate': get_user_input_with_limits(\"Homework Submission Rate (percentage)\", 0, 100),\n",
    "        'participation_in_class': get_user_input_with_limits(\"Participation in Class (percentage)\", 0, 100),\n",
    "        'quiz_scores': get_user_input_with_limits(\"Quiz Scores\", 0, 500),\n",
    "        'study_time': get_user_input_no_limit(\"Study Time (hours)\"),\n",
    "        'motivation_level': get_user_input_with_limits(\"Motivation Level (percentage)\", 0, 100),\n",
    "        'stress_level': get_user_input_with_limits(\"Stress Level (percentage)\", 0, 100),\n",
    "        'social_interaction': get_user_input_with_limits(\"Social Interaction (percentage)\", 0, 100),\n",
    "        'parental_involvement': get_user_input_with_limits(\"Parental Involvement (percentage)\", 0, 100),\n",
    "        'access_to_resources': get_user_input_with_limits(\"Access to Resources (percentage)\", 0, 100),\n",
    "        'school_environment': get_user_input_with_limits(\"School Environment (percentage)\", 0, 100),\n",
    "        'participation_in_sports': get_user_input_binary(\"Participation in Sports\"),\n",
    "        'art_music_participation': get_user_input_binary(\"Art/Music Participation\"),\n",
    "        'volunteer_work': get_user_input_binary(\"Volunteer Work\"),\n",
    "        'sleep_quality': get_user_input_with_limits(\"Sleep Quality (percentage)\", 0, 100),\n",
    "        'physical_health': get_user_input_with_limits(\"Physical Health (percentage)\", 0, 100)\n",
    "    }\n",
    "    \n",
    "    # Prepare user input for prediction\n",
    "    user_features = np.array([list(user_data.values())])\n",
    "    user_input_df = pd.DataFrame(user_features, columns=user_data.keys())\n",
    "    user_input_df = user_input_df.fillna(user_input_df.mean())\n",
    "    user_input_scaled = scaler.transform(user_input_df)\n",
    "    prediction = model.predict(user_input_scaled)\n",
    "    letter_grade = grade_to_letter(prediction[0])\n",
    "    \n",
    "    # Provide advice\n",
    "    advice = provide_advice(prediction[0], user_data)\n",
    "    \n",
    "    print(f\"\\nPredicted Average Grade: {prediction[0]:.2f} ({letter_grade})\")\n",
    "    print(\"\\nAdvice:\")\n",
    "    for item in advice:\n",
    "        display(HTML(f\"- {item}\"))\n",
    "\n",
    "def grade_to_letter(grade):\n",
    "    \"\"\"Convert a numerical grade to a letter grade.\"\"\"\n",
    "    if grade >= 4.0:\n",
    "        return 'A'\n",
    "    elif grade >= 3.7:\n",
    "        return 'A-'\n",
    "    elif grade >= 3.3:\n",
    "        return 'B+'\n",
    "    elif grade >= 3.0:\n",
    "        return 'B'\n",
    "    elif grade >= 2.7:\n",
    "        return 'B-'\n",
    "    elif grade >= 2.3:\n",
    "        return 'C+'\n",
    "    elif grade >= 2.0:\n",
    "        return 'C'\n",
    "    elif grade >= 1.7:\n",
    "        return 'C-'\n",
    "    elif grade >= 1.0:\n",
    "        return 'D'\n",
    "    else:\n",
    "        return 'F'\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
